stages:
  - build
  - deploy

build-job:
  image: docker:cli
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -f Dockerfile --pull -t "$DOCKER_IMAGE_NAME" .
    - docker push "$DOCKER_IMAGE_NAME"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
        docker push "$CI_REGISTRY_IMAGE:latest"
      fi
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

deploy-job:
  stage: deploy
  image: alpine
  before_script:
    - apk add gettext openssh-client
  script:
    - eval `ssh-agent`
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - touch ~/.ssh/known_hosts
    - chmod 600 ~/.ssh/known_hosts
    - ssh-keyscan -t rsa $DEPLOY_TARGET >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - echo "ðŸ“¦ Sende Compose-Datei"
    - scp docker-compose.prod.yaml $DEPLOY_TARGET_USER@$DEPLOY_TARGET:/home/$DEPLOY_TARGET_USER/compose_pdf.yaml

    - echo "ðŸš€ Starte Deployment"
    - ssh $DEPLOY_TARGET_USER@$DEPLOY_TARGET "
        cd /home/$DEPLOY_TARGET_USER;
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY;
        docker compose -f compose_pdf.yaml pull;
        docker compose -f compose_pdf.yaml up -d
      "
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
